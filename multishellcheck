#!/bin/bash

# shellcheck disable=SC2030,SC2031

set -euo pipefail
shopt -s lastpipe

IFS=$'\n'

if [[ $# -eq 0 ]]
then
	echo "Usage: $0 MAIN-FILE-NAME [SHELLCHECK-OPTIONS...]"
	exit 1
fi

lines=()

function read_file()
{
	local fn=$1

	local dir
	dir=$(dirname "$fn")

	local lineno=0
	local source_override=

	local line
	while read -r line
	do
		lineno=$((lineno+1))

		if [[ "$line" =~ ^[[:space:]]*#\ shellcheck\ source=(.*)$ ]]
		then
			source_override=${BASH_REMATCH[1]}
		elif [[ "$line" =~ ^[[:space:]]*source\ ([^#]*)(\#.*)?$ ]]
		then
			local src
			if [[ -n ${source_override:+x} ]]
			then
				src=$source_override
			else
				src=${BASH_REMATCH[1]}
			fi

			# if a variable is used only in a source line,
			# make shellcheck think it is being used
			printf "echo %s\n" "$line"
			lines+=("$fn:$lineno")

			src="$dir/$src"
			if [[ -f "$src" ]]
			then
				read_file "$src"
			fi
		else
			source_override=
			printf "%s\n" "$line"
			lines+=("$fn:$lineno")
		fi
	done < "$fn"
}

tmp_script=.multishellcheck

read_file "$1" > "$tmp_script"

shift

function getline()
{
	local lineno=$1

	# bash arrays are 0-based, but line numbers are 1-based
	lineno=$((lineno-1))

	local lineinfo=${lines[$lineno]}

	ofile=${lineinfo%:*}
	oline=${lineinfo##*:}
}

current_file=

! {
	shellcheck "$@" "$tmp_script"
	printf "multishellcheck-status=%s\n" $? ;
} | \
	while read -r line
	do
		if [[ "$line" == multishellcheck-status=* ]]
		then
			status=${line#*=}
		elif [[ "$line" =~ ^In\ $tmp_script\ line\ ([0-9]+):$ ]] # default format
		then
			getline "${BASH_REMATCH[1]}"
			printf "In %s line %s:\n" "$ofile" "$oline"
		elif [[ "$line" =~ ^\[1mIn\ $tmp_script\ line\ ([0-9]+):\[0m$ ]] # -Calways
		then
			getline "${BASH_REMATCH[1]}"
			printf "[1mIn %s line %s:[0m\n" "$ofile" "$oline"
		elif [[ "$line" == "<file name='$tmp_script' >" ]] # checkstyle - file name
		then
			:
		elif [[ "$line" =~ ^\<error\ line=\'([0-9]+)\'(.*)$ ]] # checkstyle - error line
		then
			getline "${BASH_REMATCH[1]}"
			if [[ "${current_file:-}" != "$ofile" ]]
			then
				if [[ "${current_file:-}" != "" ]]
				then
					printf "</file>\n"
				fi
				escaped_fn=$(printf "%s" "$ofile" | sed -ze 's/&/&amp;/g' -e 's/</&lt;/g' -e 's/>/&gt;/g')
				printf "<file name='%s' >\n" "$escaped_fn"
				current_file=$ofile
			fi
			printf "<error line='%s'%s\n" "$oline" "${BASH_REMATCH[2]}"
		elif [[ "$line" == *$tmp_script* ]]
		then
			printf "Unrecognized ShellCheck output format: %s\n" "$line"
			exit 1
		else
			printf "%s\n" "$line"
		fi
	done

rm "$tmp_script"

exit "$status"
